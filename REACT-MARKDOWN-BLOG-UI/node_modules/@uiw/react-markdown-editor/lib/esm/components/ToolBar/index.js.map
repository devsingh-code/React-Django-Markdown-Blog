{"version":3,"sources":["../../../../src/components/ToolBar/index.tsx"],"names":["classnames","React","icon","ToolBar","props","prefixCls","className","onClick","toolbars","htmlProps","length","map","name","key","Icon","bind","PureComponent","displayName","defaultProps"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,IAAP,MAAiB,aAAjB;AACA;;IAQqBC,O;;;;;;;;;;;;;6BAOH;AAAA;;AAAA,wBACoD,KAAKC,KADzD;AAAA,UACNC,SADM,eACNA,SADM;AAAA,UACKC,SADL,eACKA,SADL;AAAA,UACgBC,OADhB,eACgBA,OADhB;AAAA,UACyBC,QADzB,eACyBA,QADzB;AAAA,UACsCC,SADtC;;AAEd,UAAI,CAACD,QAAD,IAAaA,QAAQ,CAACE,MAAT,KAAoB,CAArC,EAAwC,OAAO,IAAP;AACxC,0BACE;AAAK,QAAA,SAAS,EAAEV,UAAU,WAAIK,SAAJ,eAAyBC,SAAzB;AAA1B,SAAmEG,SAAnE,GACGD,QAAQ,CAACG,GAAT,CAAa,UAACC,IAAD,EAAeC,GAAf,EAAuB;AACnC,YAAMC,IAAI,GAAIZ,IAAD,CAAgCU,IAAhC,CAAb;AACA,4BACE;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,GAAG,EAAEC,GAA3B;AAAgC,UAAA,OAAO,EAAEN,OAAO,CAACQ,IAAR,CAAa,KAAb,EAAmBH,IAAnB;AAAzC,gBAAqEE,IAArE,MADF;AAGD,OALA,CADH,CADF;AAUD;;;;EApBkCb,KAAK,CAACe,a;;AAAtBb,O,CACLc,W,GAAc,S;AADTd,O,CAELe,Y,GAA8B;AAC1CX,EAAAA,OAAO,EAAE;AAAA,WAAM,IAAN;AAAA,GADiC;AAE1CF,EAAAA,SAAS,EAAE,WAF+B;AAG1CG,EAAAA,QAAQ,EAAE,CAAC,MAAD,EAAS,QAAT,EAAmB,QAAnB,EAA6B,QAA7B,EAAuC,WAAvC,EAAoD,OAApD,EAA6D,OAA7D,EAAsE,MAAtE,EAA8E,MAA9E,EAAsF,OAAtF,EAA+F,OAA/F;AAHgC,C;SAFzBL,O","sourcesContent":["import classnames from 'classnames';\nimport * as React from \"react\";\nimport { IIconProps, IProps } from '../../common/props';\nimport icon from '../Icon/bar';\nimport './index.less';\n\nexport interface IToolBarProps extends IProps {\n  prefixCls: string,\n  toolbars: string[] | false,\n  onClick: (type: string) => void,\n}\n\nexport default class ToolBar extends React.PureComponent<IToolBarProps, {}> {\n  public static displayName = 'ToolBar';\n  public static defaultProps: IToolBarProps = {\n    onClick: () => null,\n    prefixCls: 'md-editor',\n    toolbars: ['bold', 'italic', 'header', 'strike', 'underline', 'olist', 'ulist', 'todo', 'link', 'image', 'quote'],\n  };\n  public render() {\n    const { prefixCls, className, onClick, toolbars, ...htmlProps } = this.props;\n    if (!toolbars || toolbars.length === 0) return null;\n    return (\n      <div className={classnames(`${prefixCls}-toolbar`, className)} {...htmlProps}>\n        {toolbars.map((name: string, key) => {\n          const Icon = (icon as unknown as IIconProps)[name];\n          return (\n            <button type=\"button\" key={key} onClick={onClick.bind(this, name)}> {Icon} </button>\n          );\n        })}\n      </div>\n    );\n  }\n}"]}