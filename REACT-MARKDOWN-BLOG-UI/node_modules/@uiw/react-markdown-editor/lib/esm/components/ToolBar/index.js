import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import classnames from 'classnames';
import * as React from "react";
import icon from '../Icon/bar';
import "./index.css";

var ToolBar = /*#__PURE__*/function (_React$PureComponent) {
  _inherits(ToolBar, _React$PureComponent);

  var _super = _createSuper(ToolBar);

  function ToolBar() {
    _classCallCheck(this, ToolBar);

    return _super.apply(this, arguments);
  }

  _createClass(ToolBar, [{
    key: "render",
    value: function render() {
      var _this = this;

      var _this$props = this.props,
          prefixCls = _this$props.prefixCls,
          className = _this$props.className,
          onClick = _this$props.onClick,
          toolbars = _this$props.toolbars,
          htmlProps = _objectWithoutProperties(_this$props, ["prefixCls", "className", "onClick", "toolbars"]);

      if (!toolbars || toolbars.length === 0) return null;
      return /*#__PURE__*/React.createElement("div", _extends({
        className: classnames("".concat(prefixCls, "-toolbar"), className)
      }, htmlProps), toolbars.map(function (name, key) {
        var Icon = icon[name];
        return /*#__PURE__*/React.createElement("button", {
          type: "button",
          key: key,
          onClick: onClick.bind(_this, name)
        }, " ", Icon, " ");
      }));
    }
  }]);

  return ToolBar;
}(React.PureComponent);

ToolBar.displayName = 'ToolBar';
ToolBar.defaultProps = {
  onClick: function onClick() {
    return null;
  },
  prefixCls: 'md-editor',
  toolbars: ['bold', 'italic', 'header', 'strike', 'underline', 'olist', 'ulist', 'todo', 'link', 'image', 'quote']
};
export { ToolBar as default }; 
//# sourceMappingURL=index.js.map