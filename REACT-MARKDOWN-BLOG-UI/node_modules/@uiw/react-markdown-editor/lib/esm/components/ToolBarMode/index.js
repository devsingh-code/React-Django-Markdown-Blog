import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import classnames from 'classnames';
import * as React from "react";
import icon from '../Icon/bar';
import "./index.css";

var ToolBarMode = /*#__PURE__*/function (_React$PureComponent) {
  _inherits(ToolBarMode, _React$PureComponent);

  var _super = _createSuper(ToolBarMode);

  function ToolBarMode(props) {
    var _this;

    _classCallCheck(this, ToolBarMode);

    _this = _super.call(this, props);
    _this.state = {
      fullscreen: false,
      preview: true
    };
    return _this;
  }

  _createClass(ToolBarMode, [{
    key: "updateMode",
    value: function updateMode(key, value) {
      this.setState(_defineProperty({}, key, value));
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          prefixCls = _this$props.prefixCls,
          className = _this$props.className,
          onClick = _this$props.onClick,
          toolbarsMode = _this$props.toolbarsMode,
          htmlProps = _objectWithoutProperties(_this$props, ["prefixCls", "className", "onClick", "toolbarsMode"]);

      var _this$state = this.state,
          preview = _this$state.preview,
          fullscreen = _this$state.fullscreen;

      if (!toolbarsMode || toolbarsMode.length === 0) {
        return null;
      }

      return /*#__PURE__*/React.createElement("div", _extends({
        className: classnames("".concat(prefixCls, "-toolbar"), "".concat(prefixCls, "-toolbar-mode"), className)
      }, htmlProps), toolbarsMode.map(function (name, key) {
        var Icon = icon[name];
        return /*#__PURE__*/React.createElement("button", {
          key: key,
          type: "button",
          className: classnames({
            active: preview && name === 'preview' || fullscreen && name === 'fullscreen'
          }),
          onClick: onClick.bind(_this2, name)
        }, Icon);
      }));
    }
  }]);

  return ToolBarMode;
}(React.PureComponent);

ToolBarMode.displayName = 'ToolBar';
ToolBarMode.defaultProps = {
  onClick: function onClick() {
    return null;
  },
  prefixCls: 'md-editor',
  toolbarsMode: ['preview', 'fullscreen']
};
export { ToolBarMode as default }; 
//# sourceMappingURL=index.js.map