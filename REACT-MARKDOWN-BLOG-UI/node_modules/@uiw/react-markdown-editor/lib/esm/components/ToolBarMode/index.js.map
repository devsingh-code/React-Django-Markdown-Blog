{"version":3,"sources":["../../../../src/components/ToolBarMode/index.tsx"],"names":["classnames","React","icon","ToolBarMode","props","state","fullscreen","preview","key","value","setState","prefixCls","className","onClick","toolbarsMode","htmlProps","length","map","name","Icon","active","bind","PureComponent","displayName","defaultProps"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,IAAP,MAAiB,aAAjB;AACA;;IAcqBC,W;;;;;AAOnB,uBAAYC,KAAZ,EAAsC;AAAA;;AAAA;;AACpC,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE,KADD;AAEXC,MAAAA,OAAO,EAAE;AAFE,KAAb;AAFoC;AAMrC;;;;+BAEiBC,G,EAAaC,K,EAAiB;AAC9C,WAAKC,QAAL,qBAAiBF,GAAjB,EAAuBC,KAAvB;AACD;;;6BAEe;AAAA;;AAAA,wBACwD,KAAKL,KAD7D;AAAA,UACNO,SADM,eACNA,SADM;AAAA,UACKC,SADL,eACKA,SADL;AAAA,UACgBC,OADhB,eACgBA,OADhB;AAAA,UACyBC,YADzB,eACyBA,YADzB;AAAA,UAC0CC,SAD1C;;AAAA,wBAEkB,KAAKV,KAFvB;AAAA,UAENE,OAFM,eAENA,OAFM;AAAA,UAEGD,UAFH,eAEGA,UAFH;;AAGd,UAAI,CAACQ,YAAD,IAAiBA,YAAY,CAACE,MAAb,KAAwB,CAA7C,EAAgD;AAC9C,eAAO,IAAP;AACD;;AACD,0BACE;AAAK,QAAA,SAAS,EAAEhB,UAAU,WAAIW,SAAJ,yBAA4BA,SAA5B,oBAAsDC,SAAtD;AAA1B,SAAgGG,SAAhG,GACGD,YAAY,CAACG,GAAb,CAAiB,UAACC,IAAD,EAAeV,GAAf,EAAuB;AACvC,YAAMW,IAAI,GAAIjB,IAAD,CAAgCgB,IAAhC,CAAb;AACA,4BACE;AACE,UAAA,GAAG,EAAEV,GADP;AAEE,UAAA,IAAI,EAAC,QAFP;AAGE,UAAA,SAAS,EAAER,UAAU,CAAC;AACpBoB,YAAAA,MAAM,EAAGb,OAAO,IAAIW,IAAI,KAAK,SAArB,IAAoCZ,UAAU,IAAIY,IAAI,KAAK;AAD/C,WAAD,CAHvB;AAME,UAAA,OAAO,EAAEL,OAAO,CAACQ,IAAR,CAAa,MAAb,EAAmBH,IAAnB;AANX,WAQGC,IARH,CADF;AAYD,OAdA,CADH,CADF;AAmBD;;;;EA5CsClB,KAAK,CAACqB,a;;AAA1BnB,W,CACLoB,W,GAAc,S;AADTpB,W,CAELqB,Y,GAAkC;AAC9CX,EAAAA,OAAO,EAAE;AAAA,WAAM,IAAN;AAAA,GADqC;AAE9CF,EAAAA,SAAS,EAAE,WAFmC;AAG9CG,EAAAA,YAAY,EAAE,CAAC,SAAD,EAAY,YAAZ;AAHgC,C;SAF7BX,W","sourcesContent":["import classnames from 'classnames';\nimport * as React from \"react\";\nimport { IIconProps, IProps } from '../../common/props';\nimport icon from '../Icon/bar';\nimport './index.less';\n\nexport interface IToolBarModeProps extends IProps {\n  prefixCls: string,\n  toolbarsMode: string[] | false,\n  onClick: (type: string) => void,\n}\n\nexport interface IToolBarModeState {\n  preview: boolean,\n  fullscreen: boolean,\n  [key: string]: any,\n}\n\nexport default class ToolBarMode extends React.PureComponent<IToolBarModeProps, IToolBarModeState, {}> {\n  public static displayName = 'ToolBar';\n  public static defaultProps: IToolBarModeProps = {\n    onClick: () => null,\n    prefixCls: 'md-editor',\n    toolbarsMode: ['preview', 'fullscreen'],\n  };\n  constructor(props: IToolBarModeProps) {\n    super(props);\n    this.state = {\n      fullscreen: false,\n      preview: true,\n    }\n  }\n\n  public updateMode(key: string, value?: boolean) {\n    this.setState({ [key]: value });\n  }\n\n  public render() {\n    const { prefixCls, className, onClick, toolbarsMode, ...htmlProps } = this.props;\n    const { preview, fullscreen } = this.state;\n    if (!toolbarsMode || toolbarsMode.length === 0) {\n      return null;\n    }\n    return (\n      <div className={classnames(`${prefixCls}-toolbar`, `${prefixCls}-toolbar-mode`, className)} {...htmlProps}>\n        {toolbarsMode.map((name: string, key) => {\n          const Icon = (icon as unknown as IIconProps)[name];\n          return (\n            <button\n              key={key}\n              type=\"button\"\n              className={classnames({\n                active: (preview && name === 'preview') || (fullscreen && name === 'fullscreen'),\n              })}\n              onClick={onClick.bind(this, name)}\n            >\n              {Icon}\n            </button>\n          );\n        })}\n      </div>\n    );\n  }\n}"]}