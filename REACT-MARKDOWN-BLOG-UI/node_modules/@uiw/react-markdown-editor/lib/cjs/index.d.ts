/// <reference types="codemirror" />
import * as React from "react";
import { IProps } from './common/props';
import CodeMirror, { ICodeMirror } from './components/CodeMirror';
import PreviewMarkdown, { IPreviewMarkdown } from './components/PreviewMarkdown';
import ToolBarMode, { IToolBarModeProps } from './components/ToolBarMode';
import './index.less';
export interface IMarkdownEditor extends IProps, ICodeMirror {
    prefixCls?: string;
    value?: string;
    height?: number;
    visble?: boolean;
    visbleEditor?: boolean;
    toolbars?: string[] | false;
    toolbarsMode?: IToolBarModeProps['toolbarsMode'] | false;
    previewProps?: IPreviewMarkdown['previewProps'];
    options?: CodeMirror.EditorConfiguration;
}
interface IMarkdownEditorState {
}
export default class MarkdownEditor extends React.PureComponent<IMarkdownEditor, IMarkdownEditorState> {
    static displayName: string;
    static defaultProps: IMarkdownEditor;
    container: HTMLDivElement;
    editorClientHeight: number;
    preview: PreviewMarkdown;
    toolbarsMode: ToolBarMode;
    CodeMirror: CodeMirror;
    render(): JSX.Element;
    componentDidMount(): void;
    componentWillUnmount(): void;
    handleResize: () => void;
    componentWillReceiveProps(nextProps: IMarkdownEditor): void;
    getInstance: (editor: CodeMirror) => void;
    private onChange;
    private previewMarkdown;
    private fullScreen;
    private setEditorSize;
    private onClickMode;
    private onClick;
}
export {};
