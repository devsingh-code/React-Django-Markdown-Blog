"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _classnames = _interopRequireDefault(require("classnames"));

var React = _interopRequireWildcard(require("react"));

var _CodeMirror = _interopRequireDefault(require("./components/CodeMirror"));

var _PreviewMarkdown = _interopRequireDefault(require("./components/PreviewMarkdown"));

var _ToolBar = _interopRequireDefault(require("./components/ToolBar"));

var _ToolBarMode = _interopRequireDefault(require("./components/ToolBarMode"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var MarkdownEditor = /*#__PURE__*/function (_React$PureComponent) {
  (0, _inherits2.default)(MarkdownEditor, _React$PureComponent);

  var _super = _createSuper(MarkdownEditor);

  function MarkdownEditor() {
    var _this;

    (0, _classCallCheck2.default)(this, MarkdownEditor);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.container = void 0;
    _this.editorClientHeight = void 0;
    _this.preview = void 0;
    _this.toolbarsMode = void 0;
    _this.CodeMirror = void 0;

    _this.handleResize = function () {
      var isfullscreen = _this.toolbarsMode.state.fullscreen;

      if (isfullscreen) {
        _this.setEditorSize(isfullscreen);
      }
    };

    _this.getInstance = function (editor) {
      if (editor) {
        _this.CodeMirror = editor;
      }
    };

    _this.onChange = function (editor, data, value) {
      var _ref = _this.props,
          onChange = _ref.onChange;

      if (onChange) {
        if (_this.preview) {
          _this.preview.updateSource(editor.getValue());
        }

        onChange(editor, data, editor.getValue());
      }
    };

    _this.onClickMode = function (type) {
      if (type === 'preview') {
        _this.previewMarkdown();

        return;
      }

      if (type === 'fullscreen') {
        _this.fullScreen();

        return;
      }
    };

    _this.onClick = function (type) {
      var selection = _this.CodeMirror.editor.getSelection();

      var pos = _this.CodeMirror.editor.getCursor();

      var value = ''; // 'header', 'strike', 'underline', 'olist', 'ulist', 'todo', 'link', 'image', 'quote', 'preview'

      if (type === 'bold') {
        value = selection ? "**".concat(selection, "**") : "****";
        pos.ch = selection ? pos.ch : pos.ch + 2;
      }

      if (type === 'italic') {
        value = selection ? "*".concat(selection, "*") : "**";
        pos.ch = selection ? pos.ch : pos.ch + 1;
      }

      if (type === 'header') {
        value = selection ? "# ".concat(selection) : '# ';
        pos.ch = selection ? pos.ch : pos.ch + 2;
      }

      if (type === 'strike') {
        value = selection ? "~~".concat(selection, "~~") : '~~~~';
        pos.ch = selection ? pos.ch : pos.ch + 2;
      }

      if (type === 'underline') {
        value = selection ? "<u>".concat(selection, "</u>") : '<u></u>';
        pos.ch = selection ? pos.ch : pos.ch + 3;
      }

      if (type === 'olist') {
        value = selection ? "- ".concat(selection) : '- ';
        pos.ch = selection ? pos.ch : pos.ch + 2;
      }

      if (type === 'ulist') {
        value = selection ? "1. ".concat(selection) : '1. ';
        pos.ch = selection ? pos.ch : pos.ch + 3;
      }

      if (type === 'todo') {
        value = selection ? "- [ ] ".concat(selection) : '- [ ] ';
        pos.ch = selection ? pos.ch : pos.ch + 6;
      }

      if (type === 'link') {
        value = '[连接说明](连接地址 "连接标题")';
      }

      if (type === 'image') {
        value = selection ? "".concat(selection, " ![](\u56FE\u7247\u5730\u5740 \"\u56FE\u7247\u63CF\u8FF0\")") : '![图片描述](图片地址 "图片描述")\n';
      }

      if (type === 'quote') {
        value = selection ? "> ".concat(selection) : '> ';
        pos.ch = selection ? pos.ch : pos.ch + 2;
      }

      _this.CodeMirror.editor.replaceSelection(value);

      _this.CodeMirror.editor.focus();

      _this.CodeMirror.editor.setCursor(pos.line, pos.ch);
    };

    return _this;
  }

  (0, _createClass2.default)(MarkdownEditor, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          prefixCls = _this$props.prefixCls,
          className = _this$props.className,
          toolbars = _this$props.toolbars,
          toolbarsMode = _this$props.toolbarsMode,
          onChange = _this$props.onChange,
          visble = _this$props.visble,
          visbleEditor = _this$props.visbleEditor,
          previewProps = _this$props.previewProps,
          codemirrorProps = (0, _objectWithoutProperties2.default)(_this$props, ["prefixCls", "className", "toolbars", "toolbarsMode", "onChange", "visble", "visbleEditor", "previewProps"]);
      return /*#__PURE__*/React.createElement("div", {
        ref: function ref(node) {
          return _this2.container = node;
        }
      }, /*#__PURE__*/React.createElement("div", {
        className: (0, _classnames.default)(prefixCls, className)
      }, /*#__PURE__*/React.createElement(_ToolBarMode.default, {
        ref: function ref(mode) {
          return _this2.toolbarsMode = mode;
        },
        toolbarsMode: toolbarsMode,
        onClick: this.onClickMode
      }), /*#__PURE__*/React.createElement(_ToolBar.default, {
        toolbars: toolbars,
        onClick: this.onClick
      }), /*#__PURE__*/React.createElement("div", {
        className: (0, _classnames.default)("".concat(prefixCls, "-content"))
      }, visbleEditor && /*#__PURE__*/React.createElement(_CodeMirror.default, (0, _extends2.default)({
        visbleEditor: visbleEditor,
        ref: this.getInstance
      }, codemirrorProps, {
        onChange: this.onChange
      })), /*#__PURE__*/React.createElement(_PreviewMarkdown.default, {
        visble: visble,
        ref: function ref(pmd) {
          return _this2.preview = pmd;
        },
        value: this.props.value,
        previewProps: previewProps
      }))));
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.preview && this.CodeMirror) {
        this.props.visble ? this.preview.show() : this.preview.hide();
        this.CodeMirror.editor.setSize(this.props.visble ? '50%' : '100%');

        var _this$CodeMirror$edit = this.CodeMirror.editor.getScrollInfo(),
            clientHeight = _this$CodeMirror$edit.clientHeight;

        this.editorClientHeight = clientHeight;
        window.addEventListener('resize', this.handleResize, true);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener('resize', this.handleResize, true);
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.visble !== this.props.visble) {
        nextProps.visble ? this.preview.show() : this.preview.hide();
        this.CodeMirror.editor.setSize(nextProps.visble ? '50%' : '100%');
      }
    }
  }, {
    key: "previewMarkdown",
    value: function previewMarkdown() {
      if (this.preview) {
        this.preview.state.visble ? this.preview.hide() : this.preview.show();
        this.toolbarsMode.updateMode('preview', !this.preview.state.visble);
        this.CodeMirror.editor.setSize(this.preview.state.visble ? '100%' : '50%');
      }
    }
  }, {
    key: "fullScreen",
    value: function fullScreen() {
      var prefixCls = this.props.prefixCls;

      if (this.toolbarsMode && this.container) {
        var isfullscreen = !this.toolbarsMode.state.fullscreen;
        this.toolbarsMode.updateMode('fullscreen', isfullscreen);
        this.container.className = isfullscreen ? (0, _classnames.default)("".concat(prefixCls, "-fullscreen")) : '';
        document.body.style.overflow = isfullscreen ? 'hidden' : 'initial';
        this.setEditorSize(isfullscreen);
      }
    }
  }, {
    key: "setEditorSize",
    value: function setEditorSize(isfullscreen) {
      var clientHeight = document.body.clientHeight;
      this.CodeMirror.editor.setSize(this.preview.state.visble ? '50%' : '100%', isfullscreen ? clientHeight - 33 : this.editorClientHeight);
    }
  }]);
  return MarkdownEditor;
}(React.PureComponent);

exports.default = MarkdownEditor;
MarkdownEditor.displayName = 'MarkdownEditor';
MarkdownEditor.defaultProps = {
  onChange: function onChange() {
    return null;
  },
  prefixCls: 'md-editor',
  value: '',
  visbleEditor: true,
  visble: true
};
module.exports = exports.default; 
//# sourceMappingURL=index.js.map