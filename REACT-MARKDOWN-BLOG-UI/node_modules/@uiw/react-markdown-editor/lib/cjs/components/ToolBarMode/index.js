"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _classnames = _interopRequireDefault(require("classnames"));

var React = _interopRequireWildcard(require("react"));

var _bar = _interopRequireDefault(require("../Icon/bar"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var ToolBarMode = /*#__PURE__*/function (_React$PureComponent) {
  (0, _inherits2.default)(ToolBarMode, _React$PureComponent);

  var _super = _createSuper(ToolBarMode);

  function ToolBarMode(props) {
    var _this;

    (0, _classCallCheck2.default)(this, ToolBarMode);
    _this = _super.call(this, props);
    _this.state = {
      fullscreen: false,
      preview: true
    };
    return _this;
  }

  (0, _createClass2.default)(ToolBarMode, [{
    key: "updateMode",
    value: function updateMode(key, value) {
      this.setState((0, _defineProperty2.default)({}, key, value));
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          prefixCls = _this$props.prefixCls,
          className = _this$props.className,
          onClick = _this$props.onClick,
          toolbarsMode = _this$props.toolbarsMode,
          htmlProps = (0, _objectWithoutProperties2.default)(_this$props, ["prefixCls", "className", "onClick", "toolbarsMode"]);
      var _this$state = this.state,
          preview = _this$state.preview,
          fullscreen = _this$state.fullscreen;

      if (!toolbarsMode || toolbarsMode.length === 0) {
        return null;
      }

      return /*#__PURE__*/React.createElement("div", (0, _extends2.default)({
        className: (0, _classnames.default)("".concat(prefixCls, "-toolbar"), "".concat(prefixCls, "-toolbar-mode"), className)
      }, htmlProps), toolbarsMode.map(function (name, key) {
        var Icon = _bar.default[name];
        return /*#__PURE__*/React.createElement("button", {
          key: key,
          type: "button",
          className: (0, _classnames.default)({
            active: preview && name === 'preview' || fullscreen && name === 'fullscreen'
          }),
          onClick: onClick.bind(_this2, name)
        }, Icon);
      }));
    }
  }]);
  return ToolBarMode;
}(React.PureComponent);

exports.default = ToolBarMode;
ToolBarMode.displayName = 'ToolBar';
ToolBarMode.defaultProps = {
  onClick: function onClick() {
    return null;
  },
  prefixCls: 'md-editor',
  toolbarsMode: ['preview', 'fullscreen']
};
module.exports = exports.default; 
//# sourceMappingURL=index.js.map