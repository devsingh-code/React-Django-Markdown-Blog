{"version":3,"sources":["../../../../src/components/PreviewMarkdown/index.tsx"],"names":["hljs","configure","classPrefix","tabReplace","PreviewMarkdown","props","node","allowNode","type","value","test","state","visble","highlight","setState","nextProps","code","getElementsByTagName","tag","parentNode","tagName","highlightBlock","prefixCls","previewProps","elementProps","React","Component","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;AAMAA,mBAAKC,SAAL,CAAe;AACbC,EAAAA,WAAW,EAAE,EADA;AACI;AACjBC,EAAAA,UAAU,EAAE,IAFC,CAEK;;AAFL,CAAf;;IAkBqBC,e;;;;;AAMnB,2BAAYC,KAAZ,EAAqC;AAAA;;AAAA;AACnC,8BAAMA,KAAN;AADmC,UAD9BC,IAC8B;;AAAA,UA8D7BC,SA9D6B,GA8DjB,UAACD,IAAD,EAAsC;AACxD,UAAIA,IAAI,CAACE,IAAL,KAAc,MAAd,IAAwBF,IAAI,CAACG,KAAjC,EAAwC;AACtC,YAAI,iBAAiBC,IAAjB,CAAsBJ,IAAI,CAACG,KAA3B,CAAJ,EAAuC;AACrC,iBAAO,KAAP;AACD;AACF;;AACD,aAAO,IAAP;AACD,KArEoC;;AAEnC,UAAKE,KAAL,GAAa;AACXF,MAAAA,KAAK,EAAEJ,KAAK,CAACI,KADF;AAEXG,MAAAA,MAAM,EAAEP,KAAK,CAACO;AAFH,KAAb;AAFmC;AAMpC;;;;wCAE0B;AACzB,WAAKC,SAAL;AACD;;;2BAEa;AACZ,WAAKC,QAAL,CAAc;AAAEF,QAAAA,MAAM,EAAE;AAAV,OAAd;AACD;;;2BAEa;AACZ,WAAKE,QAAL,CAAc;AAAEF,QAAAA,MAAM,EAAE;AAAV,OAAd;AACD;;;8CAEgCG,S,EAA6B;AAC5D,UAAIA,SAAS,CAACH,MAAV,KAAqB,KAAKP,KAAL,CAAWO,MAApC,EAA4C;AAC1C,aAAKE,QAAL,CAAc;AAAEF,UAAAA,MAAM,EAAEG,SAAS,CAACH;AAApB,SAAd;AACD;AACF;;;gCAEkB;AACjB,UAAMI,IAAI,GAAG,KAAKV,IAAL,CAAUW,oBAAV,CAA+B,MAA/B,CAAb;;AADiB,iDAEGD,IAFH;AAAA;;AAAA;AAEjB,4DAA0B;AAAA,cAAfP,KAAe;AACxB,cAAMS,GAAG,GAAGT,KAAK,CAACU,UAAlB;;AACA,cAAID,GAAG,IAAIA,GAAG,CAACE,OAAJ,KAAgB,KAA3B,EAAkC;AAChCpB,+BAAKqB,cAAL,CAAoBZ,KAApB;AACD;AACF;AAPgB;AAAA;AAAA;AAAA;AAAA;AAQlB;;;iCAEmBA,K,EAAe;AAAA;;AACjC,WAAKK,QAAL,CAAc;AAAEL,QAAAA,KAAK,EAALA;AAAF,OAAd,EAAyB,YAAM;AAC7B,QAAA,MAAI,CAACI,SAAL;AACD,OAFD;AAGD;;;6BAEe;AAAA;;AAAA,wBACsD,KAAKR,KAD3D;AAAA,UACNiB,SADM,eACNA,SADM;AAAA,UACKV,MADL,eACKA,MADL;AAAA,UACaH,KADb,eACaA,KADb;AAAA,UACoBc,YADpB,eACoBA,YADpB;AAAA,UACqCC,YADrC;AAEd,0BACE;AACE,QAAA,GAAG,EAAE,aAAClB,IAAD;AAAA,iBAA0B,MAAI,CAACA,IAAL,GAAYA,IAAtC;AAAA,SADP;AAEE,QAAA,SAAS,EAAE,oCAAcgB,SAAd,2DACLA,SADK,cACgB,KAAKX,KAAL,CAAWC,MAD3B;AAFb,SAKMY,YALN,gBAOE,oBAAC,sBAAD;AACE,QAAA,SAAS,EAAE,oCAAcF,SAAd,eADb;AAEE,QAAA,MAAM,EAAE,KAAKX,KAAL,CAAWF,KAFrB;AAGE,QAAA,UAAU,EAAE,KAHd;AAIE,QAAA,SAAS,EAAE,KAAKF;AAJlB,SAKMgB,YALN,EAPF,CADF;AAiBD;;;EAnE0CE,KAAK,CAACC,S;;;AAA9BtB,e,CACLuB,Y,GAAiC;AAC7CL,EAAAA,SAAS,EAAE,WADkC;AAE7CV,EAAAA,MAAM,EAAE;AAFqC,C","sourcesContent":["import classnames from 'classnames'\nimport hljs from 'highlight.js';\nimport * as React from 'react';\nimport ReactMarkdown, { MarkdownAbstractSyntaxTree, ReactMarkdownProps } from 'react-markdown';\nimport { IProps } from '../../common/props';\nimport './hljs.less';\nimport './index.less';\nimport './markdown.less';\n\nhljs.configure({\n  classPrefix: '', // don't append class prefix\n  tabReplace: '  ', // 2 spaces\n});\n\nexport interface IPreviewMarkdown extends IProps {\n  visble: boolean;\n  previewProps?: ReactMarkdownProps;\n  value?: string;\n  prefixCls?: string;\n  style?: React.CSSProperties;\n}\n\nexport interface IPreviewMarkdownState {\n  value?: string;\n  visble?: boolean;\n}\n\nexport default class PreviewMarkdown extends React.Component<IPreviewMarkdown, IPreviewMarkdownState> {\n  public static defaultProps: IPreviewMarkdown = {\n    prefixCls: 'md-editor',\n    visble: true,\n  }\n  public node!: HTMLDivElement;\n  constructor(props: IPreviewMarkdown) {\n    super(props);\n    this.state = {\n      value: props.value,\n      visble: props.visble,\n    }\n  }\n\n  public componentDidMount() {\n    this.highlight();\n  }\n\n  public show() {\n    this.setState({ visble: true });\n  }\n\n  public hide() {\n    this.setState({ visble: false });\n  }\n\n  public componentWillReceiveProps(nextProps: IPreviewMarkdown) {\n    if (nextProps.visble !== this.props.visble) {\n      this.setState({ visble: nextProps.visble });\n    }\n  }\n\n  public highlight() {\n    const code = this.node.getElementsByTagName('code') as unknown as HTMLElement[];\n    for (const value of code) {\n      const tag = value.parentNode as HTMLElement;\n      if (tag && tag.tagName === 'PRE') {\n        hljs.highlightBlock(value);\n      }\n    }\n  }\n\n  public updateSource(value: string) {\n    this.setState({ value }, () => {\n      this.highlight();\n    });\n  }\n\n  public render() {\n    const { prefixCls, visble, value, previewProps, ...elementProps } = this.props;\n    return (\n      <div\n        ref={(node: HTMLDivElement) => this.node = node}\n        className={classnames(`${prefixCls}-preview`, {\n          [`${prefixCls}-visble`]: this.state.visble,\n        })}\n        {...elementProps}\n      >\n        <ReactMarkdown\n          className={classnames(`${prefixCls}-markdown`)}\n          source={this.state.value}\n          escapeHtml={false}\n          allowNode={this.allowNode}\n          {...previewProps}\n        />\n      </div>\n    );\n  }\n  private allowNode = (node: MarkdownAbstractSyntaxTree) => {\n    if (node.type === 'html' && node.value) {\n      if (/<!--([^]+?)-->/.test(node.value)) {\n        return false;\n      }\n    }\n    return true;\n  }\n}"]}