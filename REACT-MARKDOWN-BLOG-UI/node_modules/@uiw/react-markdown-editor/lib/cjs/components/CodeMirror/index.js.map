{"version":3,"sources":["../../../../src/components/CodeMirror/index.tsx"],"names":["SERVER_RENDERED","navigator","global","PREVENT_CODEMIRROR_RENDER","cm","require","ReactCodeMirror","props","textarea","editor","instance","editorWillMount","options","defineMode","name","fn","editorOption","tabSize","lineNumbers","mode","fromTextArea","renderCodeMirror","nextPros","value","width","height","nextProps","nextState","propNames","Object","keys","eventHandle","filter","prop","test","eventDict","forEach","ele","replace","s","slice","toLowerCase","getEventHandleFromProps","event","handle","on","setValue","setSize","Component","defaultProps"],"mappings":"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","sourcesContent":["import * as CodeMirror from 'codemirror';\nimport 'codemirror/mode/markdown/markdown';\nimport React, { Component } from 'react';\nimport { DomEvent, IDefineModeOptions, IEventDict, IGetSelectionOptions, IInstance, ISetScrollOptions, ISetSelectionOptions } from '../../common/codemirror';\nimport { IProps } from '../../common/props';\nimport './codemirror.less';\nimport './index.less';\n\ndeclare let global: any;\ndeclare let require: any;\n\nconst SERVER_RENDERED = (typeof navigator === 'undefined' || global.PREVENT_CODEMIRROR_RENDER === true);\n\nlet cm: any;\nif (!SERVER_RENDERED) {\n  // tslint:disable-next-line: no-var-requires\n  cm = require('codemirror');\n}\n\nexport interface ICodeMirror extends IProps {\n  value?: string,\n  width?: number | string,\n  height?: number | string,\n  className?: string;\n  cursor?: CodeMirror.Position;\n  defineMode?: IDefineModeOptions;\n  editorDidConfigure?: (editor: IInstance) => void;\n  editorDidMount?: (editor: IInstance, value: string, cb: () => void) => void;\n  editorWillMount?: () => void;\n  editorWillUnmount?: (lib: any) => void;\n  onClear?: (from: CodeMirror.Position, to: CodeMirror.Position) => void;\n  onBlur?: DomEvent;\n  onChange?: (editor: IInstance, data: CodeMirror.EditorChange, value: string) => void;\n  onContextMenu?: DomEvent;\n  onCopy?: DomEvent;\n  onCursor?: (editor: IInstance, data: CodeMirror.Position) => void;\n  onCut?: DomEvent;\n  onCursorActivity?: (editor: IInstance) => void;\n  onDblClick?: DomEvent;\n  onDragEnter?: DomEvent;\n  onDragLeave?: DomEvent;\n  onDragOver?: DomEvent\n  onDragStart?: DomEvent;\n  onDrop?: DomEvent;\n  onFocus?: DomEvent\n  onGutterClick?: (editor: IInstance, lineNumber: number, gutter: string, event: Event) => void;\n  onKeyDown?: DomEvent;\n  onKeyPress?: DomEvent;\n  onKeyUp?: DomEvent;\n  onMouseDown?: DomEvent;\n  onPaste?: DomEvent;\n  onRenderLine?: (editor: IInstance, line: CodeMirror.LineHandle, element: HTMLElement) => void;\n  onScroll?: (editor: IInstance, data: CodeMirror.ScrollInfo) => void;\n  onSelection?: (editor: IInstance, data: IGetSelectionOptions) => void;\n  onTouchStart?: DomEvent;\n  onUpdate?: (editor: IInstance) => void;\n  onViewportChange?: (editor: IInstance, start: number, end: number) => void;\n  options?: CodeMirror.EditorConfiguration\n  selection?: { ranges: ISetSelectionOptions[], focus?: boolean };\n  scroll?: ISetScrollOptions;\n  [key: string]: any,\n}\n\nexport interface ICodeMirrorState {\n  value: string;\n}\n\nexport default class ReactCodeMirror extends Component<ICodeMirror, ICodeMirrorState> {\n  public static defaultProps: ICodeMirror = {\n    height: '100%',\n    options: {\n      lineNumbers: true,\n      mode: 'markdown',\n      tabSize: 2,\n    },\n    value: '',\n    width: '100%',\n  }\n  public textarea!: HTMLTextAreaElement;\n  public editor!: any;\n  // public editor!: Doc | Editor | EditorFromTextArea | Editor;\n  public constructor(props: Readonly<ICodeMirror>) {\n    super(props);\n  }\n  public render() {\n    return (\n      <textarea ref={(instance: HTMLTextAreaElement) => this.textarea = instance} />\n    );\n  }\n\n  public componentWillMount() {\n    if (SERVER_RENDERED) {\n      return;\n    }\n\n    if (this.props.editorWillMount) {\n      this.props.editorWillMount();\n    }\n  }\n\n  public componentDidMount() {\n    if (SERVER_RENDERED) {\n      return;\n    }\n\n    const { options } = this.props;\n    if (this.props.defineMode) {\n      if (this.props.defineMode.name && this.props.defineMode.fn) {\n        cm.defineMode(this.props.defineMode.name, this.props.defineMode.fn);\n      }\n    }\n\n    const editorOption = { tabSize: 2, lineNumbers: true, ...options, mode: 'markdown' };\n    // 生成codemirror实例\n    this.editor = cm.fromTextArea(this.textarea, editorOption) as CodeMirror.EditorFromTextArea;\n\n    this.renderCodeMirror(this.props);\n  }\n  public UNSAFE_componentWillReceiveProps(nextPros: ICodeMirror) {\n    if (nextPros.value !== this.props.value || nextPros.width !== this.props.width || nextPros.height !== this.props.height) {\n      this.renderCodeMirror(nextPros);\n    }\n  }\n\n  public shouldComponentUpdate(nextProps: ICodeMirror, nextState: ICodeMirrorState) {\n    return nextProps.value !== this.props.value \n    || nextProps.options !== this.props.options\n    || nextProps.height !== this.props.height\n    || nextProps.width !== this.props.width;\n  }\n  // 将props中所有的事件处理函数映射并保存\n  public getEventHandleFromProps(): IEventDict {\n    const propNames = Object.keys(this.props);\n    const eventHandle = propNames.filter((prop) => {\n      return /^on+/.test(prop);\n    });\n\n    const eventDict: IEventDict = {};\n    eventHandle.forEach((ele) => {\n      eventDict[ele] = ele.replace(/^on[A-Z]/g, s => s.slice(2).toLowerCase()) as string;\n    });\n\n    return eventDict;\n  }\n\n  private renderCodeMirror(props: ICodeMirror) {\n    const { value, width, height } = props;\n    // 获取CodeMirror用于获取其中的一些常量\n    // 事件处理映射\n    const eventDict = this.getEventHandleFromProps();\n    Object.keys(eventDict).forEach((event: string) => {\n      const handle = this.props[event];\n      this.editor.on(eventDict[event], handle);\n    });\n    // Init value\n    this.editor.setValue(value || '');\n    // this.editor.setOption(name, editorOption.mode);\n\n    if (width || height) {\n      // Setting size\n      this.editor.setSize(width, height);\n    }\n  }\n}"]}