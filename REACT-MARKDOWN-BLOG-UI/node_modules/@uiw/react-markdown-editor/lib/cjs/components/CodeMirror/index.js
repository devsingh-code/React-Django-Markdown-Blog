"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

require("codemirror/mode/markdown/markdown");

var _react = _interopRequireWildcard(require("react"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var SERVER_RENDERED = typeof navigator === 'undefined' || global.PREVENT_CODEMIRROR_RENDER === true;
var cm;

if (!SERVER_RENDERED) {
  // tslint:disable-next-line: no-var-requires
  cm = require('codemirror');
}

var ReactCodeMirror = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(ReactCodeMirror, _Component);

  var _super = _createSuper(ReactCodeMirror);

  // public editor!: Doc | Editor | EditorFromTextArea | Editor;
  function ReactCodeMirror(props) {
    var _this;

    (0, _classCallCheck2.default)(this, ReactCodeMirror);
    _this = _super.call(this, props);
    _this.textarea = void 0;
    _this.editor = void 0;
    return _this;
  }

  (0, _createClass2.default)(ReactCodeMirror, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      return /*#__PURE__*/_react.default.createElement("textarea", {
        ref: function ref(instance) {
          return _this2.textarea = instance;
        }
      });
    }
  }, {
    key: "componentWillMount",
    value: function componentWillMount() {
      if (SERVER_RENDERED) {
        return;
      }

      if (this.props.editorWillMount) {
        this.props.editorWillMount();
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (SERVER_RENDERED) {
        return;
      }

      var options = this.props.options;

      if (this.props.defineMode) {
        if (this.props.defineMode.name && this.props.defineMode.fn) {
          cm.defineMode(this.props.defineMode.name, this.props.defineMode.fn);
        }
      }

      var editorOption = _objectSpread(_objectSpread({
        tabSize: 2,
        lineNumbers: true
      }, options), {}, {
        mode: 'markdown'
      }); // 生成codemirror实例


      this.editor = cm.fromTextArea(this.textarea, editorOption);
      this.renderCodeMirror(this.props);
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextPros) {
      if (nextPros.value !== this.props.value || nextPros.width !== this.props.width || nextPros.height !== this.props.height) {
        this.renderCodeMirror(nextPros);
      }
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      return nextProps.value !== this.props.value || nextProps.options !== this.props.options || nextProps.height !== this.props.height || nextProps.width !== this.props.width;
    } // 将props中所有的事件处理函数映射并保存

  }, {
    key: "getEventHandleFromProps",
    value: function getEventHandleFromProps() {
      var propNames = Object.keys(this.props);
      var eventHandle = propNames.filter(function (prop) {
        return /^on+/.test(prop);
      });
      var eventDict = {};
      eventHandle.forEach(function (ele) {
        eventDict[ele] = ele.replace(/^on[A-Z]/g, function (s) {
          return s.slice(2).toLowerCase();
        });
      });
      return eventDict;
    }
  }, {
    key: "renderCodeMirror",
    value: function renderCodeMirror(props) {
      var _this3 = this;

      var value = props.value,
          width = props.width,
          height = props.height; // 获取CodeMirror用于获取其中的一些常量
      // 事件处理映射

      var eventDict = this.getEventHandleFromProps();
      Object.keys(eventDict).forEach(function (event) {
        var handle = _this3.props[event];

        _this3.editor.on(eventDict[event], handle);
      }); // Init value

      this.editor.setValue(value || ''); // this.editor.setOption(name, editorOption.mode);

      if (width || height) {
        // Setting size
        this.editor.setSize(width, height);
      }
    }
  }]);
  return ReactCodeMirror;
}(_react.Component);

exports.default = ReactCodeMirror;
ReactCodeMirror.defaultProps = {
  height: '100%',
  options: {
    lineNumbers: true,
    mode: 'markdown',
    tabSize: 2
  },
  value: '',
  width: '100%'
};
module.exports = exports.default; 
//# sourceMappingURL=index.js.map