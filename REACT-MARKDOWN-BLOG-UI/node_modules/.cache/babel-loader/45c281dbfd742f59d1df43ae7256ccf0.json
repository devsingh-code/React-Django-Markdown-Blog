{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport classnames from 'classnames';\nimport * as React from \"react\";\nimport icon from '../Icon/bar';\nimport \"./index.css\";\n\nvar ToolBarMode = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(ToolBarMode, _React$PureComponent);\n\n  var _super = _createSuper(ToolBarMode);\n\n  function ToolBarMode(props) {\n    var _this;\n\n    _classCallCheck(this, ToolBarMode);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      fullscreen: false,\n      preview: true\n    };\n    return _this;\n  }\n\n  _createClass(ToolBarMode, [{\n    key: \"updateMode\",\n    value: function updateMode(key, value) {\n      this.setState(_defineProperty({}, key, value));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          prefixCls = _this$props.prefixCls,\n          className = _this$props.className,\n          onClick = _this$props.onClick,\n          toolbarsMode = _this$props.toolbarsMode,\n          htmlProps = _objectWithoutProperties(_this$props, [\"prefixCls\", \"className\", \"onClick\", \"toolbarsMode\"]);\n\n      var _this$state = this.state,\n          preview = _this$state.preview,\n          fullscreen = _this$state.fullscreen;\n\n      if (!toolbarsMode || toolbarsMode.length === 0) {\n        return null;\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", _extends({\n        className: classnames(\"\".concat(prefixCls, \"-toolbar\"), \"\".concat(prefixCls, \"-toolbar-mode\"), className)\n      }, htmlProps), toolbarsMode.map(function (name, key) {\n        var Icon = icon[name];\n        return /*#__PURE__*/React.createElement(\"button\", {\n          key: key,\n          type: \"button\",\n          className: classnames({\n            active: preview && name === 'preview' || fullscreen && name === 'fullscreen'\n          }),\n          onClick: onClick.bind(_this2, name)\n        }, Icon);\n      }));\n    }\n  }]);\n\n  return ToolBarMode;\n}(React.PureComponent);\n\nToolBarMode.displayName = 'ToolBar';\nToolBarMode.defaultProps = {\n  onClick: function onClick() {\n    return null;\n  },\n  prefixCls: 'md-editor',\n  toolbarsMode: ['preview', 'fullscreen']\n};\nexport { ToolBarMode as default };","map":{"version":3,"sources":["../../../../src/components/ToolBarMode/index.tsx"],"names":["ToolBarMode","React","PureComponent","displayName","defaultProps","onClick","prefixCls","toolbarsMode","fullscreen","preview","key","value","className","htmlProps","classnames","Icon","icon","active","name"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,UAAA,MAAA,YAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,OAAA,IAAA,MAAA,aAAA;AACA,OAAA,aAAA;;IAcqBA,W;;;;;AAOnB,WAAA,WAAA,CAAA,KAAA,EAAsC;AAAA,QAAA,KAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,WAAA,CAAA;;AACpC,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA;AACA,IAAA,KAAA,CAAA,KAAA,GAAa;AACXQ,MAAAA,UAAU,EADC,KAAA;AAEXC,MAAAA,OAAO,EAAE;AAFE,KAAb;AAFoC,WAAA,KAAA;AAMrC;;;;+BAEiBC,G,EAAaC,K,EAAiB;AAC9C,WAAA,QAAA,CAAA,eAAA,CAAA,EAAA,EAAA,GAAA,EAAA,KAAA,CAAA;AACD;;;6BAEe;AAAA,UAAA,MAAA,GAAA,IAAA;;AAAA,UAAA,WAAA,GACwD,KADxD,KAAA;AAAA,UACNL,SADM,GAAA,WAAA,CAAA,SAAA;AAAA,UACKM,SADL,GAAA,WAAA,CAAA,SAAA;AAAA,UACgBP,OADhB,GAAA,WAAA,CAAA,OAAA;AAAA,UACyBE,YADzB,GAAA,WAAA,CAAA,YAAA;AAAA,UAC0CM,SAD1C,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,WAAA,EAAA,WAAA,EAAA,SAAA,EAAA,cAAA,CAAA,CAAA;;AAAA,UAAA,WAAA,GAEkB,KAFlB,KAAA;AAAA,UAENJ,OAFM,GAAA,WAAA,CAAA,OAAA;AAAA,UAEGD,UAFH,GAAA,WAAA,CAAA,UAAA;;AAGd,UAAI,CAAA,YAAA,IAAiBD,YAAY,CAAZA,MAAAA,KAArB,CAAA,EAAgD;AAC9C,eAAA,IAAA;AACD;;AACD,aAAA,aACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA;AAAK,QAAA,SAAS,EAAEO,UAAU,CAAA,GAAA,MAAA,CAAA,SAAA,EAAA,UAAA,CAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,eAAA,CAAA,EAAA,SAAA;AAA1B,OAAA,EAAA,SAAA,CAAA,EACG,YAAY,CAAZ,GAAA,CAAiB,UAAA,IAAA,EAAA,GAAA,EAAuB;AACvC,YAAMC,IAAI,GAAIC,IAAD,CAAb,IAAa,CAAb;AACA,eAAA,aACE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AACE,UAAA,GAAG,EADL,GAAA;AAEE,UAAA,IAAI,EAFN,QAAA;AAGE,UAAA,SAAS,EAAEF,UAAU,CAAC;AACpBG,YAAAA,MAAM,EAAGR,OAAO,IAAIS,IAAI,KAAhB,SAACT,IAAmCD,UAAU,IAAIU,IAAI,KAAK;AAD/C,WAAD,CAHvB;AAME,UAAA,OAAO,EAAEb,OAAO,CAAPA,IAAAA,CAAAA,MAAAA,EAAAA,IAAAA;AANX,SAAA,EADF,IACE,CADF;AAJN,OAEK,CADH,CADF;AAmBD;;;;EA5CsCJ,KAAK,CAACC,a;;AAA1BF,W,CACLG,WADKH,GACS,SADTA;AAAAA,W,CAELI,YAFKJ,GAE6B;AAC9CK,EAAAA,OAAO,EAAE,SAAA,OAAA,GAAA;AAAA,WAAA,IAAA;AADqC,GAAA;AAE9CC,EAAAA,SAAS,EAFqC,WAAA;AAG9CC,EAAAA,YAAY,EAAE,CAAA,SAAA,EAAA,YAAA;AAHgC,CAF7BP;SAAAA,W","sourcesContent":["import classnames from 'classnames';\nimport * as React from \"react\";\nimport { IIconProps, IProps } from '../../common/props';\nimport icon from '../Icon/bar';\nimport './index.less';\n\nexport interface IToolBarModeProps extends IProps {\n  prefixCls: string,\n  toolbarsMode: string[] | false,\n  onClick: (type: string) => void,\n}\n\nexport interface IToolBarModeState {\n  preview: boolean,\n  fullscreen: boolean,\n  [key: string]: any,\n}\n\nexport default class ToolBarMode extends React.PureComponent<IToolBarModeProps, IToolBarModeState, {}> {\n  public static displayName = 'ToolBar';\n  public static defaultProps: IToolBarModeProps = {\n    onClick: () => null,\n    prefixCls: 'md-editor',\n    toolbarsMode: ['preview', 'fullscreen'],\n  };\n  constructor(props: IToolBarModeProps) {\n    super(props);\n    this.state = {\n      fullscreen: false,\n      preview: true,\n    }\n  }\n\n  public updateMode(key: string, value?: boolean) {\n    this.setState({ [key]: value });\n  }\n\n  public render() {\n    const { prefixCls, className, onClick, toolbarsMode, ...htmlProps } = this.props;\n    const { preview, fullscreen } = this.state;\n    if (!toolbarsMode || toolbarsMode.length === 0) {\n      return null;\n    }\n    return (\n      <div className={classnames(`${prefixCls}-toolbar`, `${prefixCls}-toolbar-mode`, className)} {...htmlProps}>\n        {toolbarsMode.map((name: string, key) => {\n          const Icon = (icon as unknown as IIconProps)[name];\n          return (\n            <button\n              key={key}\n              type=\"button\"\n              className={classnames({\n                active: (preview && name === 'preview') || (fullscreen && name === 'fullscreen'),\n              })}\n              onClick={onClick.bind(this, name)}\n            >\n              {Icon}\n            </button>\n          );\n        })}\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}