{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport classnames from 'classnames';\nimport * as React from \"react\";\nimport icon from '../Icon/bar';\nimport \"./index.css\";\n\nvar ToolBar = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(ToolBar, _React$PureComponent);\n\n  var _super = _createSuper(ToolBar);\n\n  function ToolBar() {\n    _classCallCheck(this, ToolBar);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ToolBar, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$props = this.props,\n          prefixCls = _this$props.prefixCls,\n          className = _this$props.className,\n          onClick = _this$props.onClick,\n          toolbars = _this$props.toolbars,\n          htmlProps = _objectWithoutProperties(_this$props, [\"prefixCls\", \"className\", \"onClick\", \"toolbars\"]);\n\n      if (!toolbars || toolbars.length === 0) return null;\n      return /*#__PURE__*/React.createElement(\"div\", _extends({\n        className: classnames(\"\".concat(prefixCls, \"-toolbar\"), className)\n      }, htmlProps), toolbars.map(function (name, key) {\n        var Icon = icon[name];\n        return /*#__PURE__*/React.createElement(\"button\", {\n          type: \"button\",\n          key: key,\n          onClick: onClick.bind(_this, name)\n        }, \" \", Icon, \" \");\n      }));\n    }\n  }]);\n\n  return ToolBar;\n}(React.PureComponent);\n\nToolBar.displayName = 'ToolBar';\nToolBar.defaultProps = {\n  onClick: function onClick() {\n    return null;\n  },\n  prefixCls: 'md-editor',\n  toolbars: ['bold', 'italic', 'header', 'strike', 'underline', 'olist', 'ulist', 'todo', 'link', 'image', 'quote']\n};\nexport { ToolBar as default };","map":{"version":3,"sources":["../../../../src/components/ToolBar/index.tsx"],"names":["ToolBar","React","PureComponent","displayName","defaultProps","onClick","prefixCls","toolbars","className","htmlProps","classnames","Icon","icon"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,UAAA,MAAA,YAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,OAAA,IAAA,MAAA,aAAA;AACA,OAAA,aAAA;;IAQqBA,O;;;;;;;;;;;;;6BAOH;AAAA,UAAA,KAAA,GAAA,IAAA;;AAAA,UAAA,WAAA,GACoD,KADpD,KAAA;AAAA,UACNM,SADM,GAAA,WAAA,CAAA,SAAA;AAAA,UACKE,SADL,GAAA,WAAA,CAAA,SAAA;AAAA,UACgBH,OADhB,GAAA,WAAA,CAAA,OAAA;AAAA,UACyBE,QADzB,GAAA,WAAA,CAAA,QAAA;AAAA,UACsCE,SADtC,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,WAAA,EAAA,WAAA,EAAA,SAAA,EAAA,UAAA,CAAA,CAAA;;AAEd,UAAI,CAAA,QAAA,IAAaF,QAAQ,CAARA,MAAAA,KAAjB,CAAA,EAAwC,OAAA,IAAA;AACxC,aAAA,aACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA;AAAK,QAAA,SAAS,EAAEG,UAAU,CAAA,GAAA,MAAA,CAAA,SAAA,EAAA,UAAA,CAAA,EAAA,SAAA;AAA1B,OAAA,EAAA,SAAA,CAAA,EACG,QAAQ,CAAR,GAAA,CAAa,UAAA,IAAA,EAAA,GAAA,EAAuB;AACnC,YAAMC,IAAI,GAAIC,IAAD,CAAb,IAAa,CAAb;AACA,eAAA,aACE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AAAQ,UAAA,IAAI,EAAZ,QAAA;AAAsB,UAAA,GAAG,EAAzB,GAAA;AAAgC,UAAA,OAAO,EAAEP,OAAO,CAAPA,IAAAA,CAAAA,KAAAA,EAAAA,IAAAA;AAAzC,SAAA,EAAA,GAAA,EAAA,IAAA,EADF,GACE,CADF;AAJN,OAEK,CADH,CADF;AAUD;;;;EApBkCJ,KAAK,CAACC,a;;AAAtBF,O,CACLG,WADKH,GACS,SADTA;AAAAA,O,CAELI,YAFKJ,GAEyB;AAC1CK,EAAAA,OAAO,EAAE,SAAA,OAAA,GAAA;AAAA,WAAA,IAAA;AADiC,GAAA;AAE1CC,EAAAA,SAAS,EAFiC,WAAA;AAG1CC,EAAAA,QAAQ,EAAE,CAAA,MAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA,WAAA,EAAA,OAAA,EAAA,OAAA,EAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,OAAA;AAHgC,CAFzBP;SAAAA,O","sourcesContent":["import classnames from 'classnames';\nimport * as React from \"react\";\nimport { IIconProps, IProps } from '../../common/props';\nimport icon from '../Icon/bar';\nimport './index.less';\n\nexport interface IToolBarProps extends IProps {\n  prefixCls: string,\n  toolbars: string[] | false,\n  onClick: (type: string) => void,\n}\n\nexport default class ToolBar extends React.PureComponent<IToolBarProps, {}> {\n  public static displayName = 'ToolBar';\n  public static defaultProps: IToolBarProps = {\n    onClick: () => null,\n    prefixCls: 'md-editor',\n    toolbars: ['bold', 'italic', 'header', 'strike', 'underline', 'olist', 'ulist', 'todo', 'link', 'image', 'quote'],\n  };\n  public render() {\n    const { prefixCls, className, onClick, toolbars, ...htmlProps } = this.props;\n    if (!toolbars || toolbars.length === 0) return null;\n    return (\n      <div className={classnames(`${prefixCls}-toolbar`, className)} {...htmlProps}>\n        {toolbars.map((name: string, key) => {\n          const Icon = (icon as unknown as IIconProps)[name];\n          return (\n            <button type=\"button\" key={key} onClick={onClick.bind(this, name)}> {Icon} </button>\n          );\n        })}\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}