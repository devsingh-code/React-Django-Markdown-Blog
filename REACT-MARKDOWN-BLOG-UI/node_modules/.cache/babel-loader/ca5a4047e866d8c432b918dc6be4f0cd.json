{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\Projects\\\\React_Markdown_Blog_Project\\\\REACT-MARKDOWN-BLOG-UI\\\\src\\\\containers\\\\PostUpdate.js\";\nimport React, { useState, useRef } from 'react';\nimport { Header, Button, Form, Image, Divider } from 'semantic-ui-react';\nimport { useFetch, history } from '../helpers';\nimport axios from 'axios';\nimport MdEditor from 'react-markdown-editor-lite';\nimport MarkdownIt from 'markdown-it';\nimport 'react-markdown-editor-lite/lib/index.css';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport { useParams } from 'react-router-dom';\nimport { api } from '../api';\n\nconst PostUpdateForm = ({\n  initialTitle,\n  initialContent,\n  initialThumbnail\n}) => {\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [title, setTitle] = useState(initialTitle);\n  const [markdown, setMarkdown] = useState(initialContent);\n  const [currentThumbnail, setCurrentThumbnail] = useState(initialThumbnail);\n  const [thumbnail, setThumbnail] = useState(null);\n  const mdParser = new MarkdownIt();\n  const fileInputRef = useRef();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    setLoading(true);\n    const formData = new FormData();\n    formData.append(\"thumbnail\", thumbnail);\n    formData.append(\"title\", title);\n    formData.append(\"content\", markdown);\n    axios.post(api.posts.create, formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n        \"Authorization\": \"Token a8df07ad37824b4c5fd9ac5d4bc13e424fa4fd8b\"\n      }\n    }).then(res => {\n      setLoading(false);\n      history.push('/');\n    }).catch(err => {\n      setLoading(false);\n      setError(err.message || err);\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, \"Update Post\"), error && /*#__PURE__*/React.createElement(Message, {\n    negative: true,\n    message: error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 19\n    }\n  }), currentThumbnail && /*#__PURE__*/React.createElement(Image, {\n    src: currentThumbnail,\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 30\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 21\n    }\n  }, \"Title\"), /*#__PURE__*/React.createElement(\"input\", {\n    placeholder: \"Title of your post\",\n    value: title,\n    onChange: e => setTitle(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(MdEditor, {\n    value: markdown,\n    style: {\n      height: \"500px\"\n    },\n    renderHTML: text => mdParser.render(text),\n    onChange: ({\n      text\n    }) => setMarkdown(text),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    fluid: true,\n    content: \"Choose a thumbnail\",\n    labelPosition: \"left\",\n    icon: \"file\",\n    onClick: () => fileInputRef.current.click(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    ref: fileInputRef,\n    type: \"file\",\n    hidden: true,\n    onChange: e => setThumbnail(e.target.files[0]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    primary: true,\n    fluid: true,\n    loading: loading,\n    disabled: loading,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }, \"Submit\")));\n};\n\nconst PostUpdate = () => {\n  const {\n    postSlug\n  } = useParams();\n  const {\n    data,\n    loading,\n    error\n  } = useFetch(api.posts.retrieve(postSlug));\n  return /*#__PURE__*/React.createElement(React.Fragment, null, error && /*#__PURE__*/React.createElement(Message, {\n    negative: true,\n    message: error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 19\n    }\n  }), loading && /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 21\n    }\n  }), data && /*#__PURE__*/React.createElement(PostUpdateForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 18\n    }\n  }));\n};\n\nexport default PostUpdate;","map":{"version":3,"sources":["C:/Users/DELL/Desktop/Projects/React_Markdown_Blog_Project/REACT-MARKDOWN-BLOG-UI/src/containers/PostUpdate.js"],"names":["React","useState","useRef","Header","Button","Form","Image","Divider","useFetch","history","axios","MdEditor","MarkdownIt","Loader","Message","useParams","api","PostUpdateForm","initialTitle","initialContent","initialThumbnail","error","setError","loading","setLoading","title","setTitle","markdown","setMarkdown","currentThumbnail","setCurrentThumbnail","thumbnail","setThumbnail","mdParser","fileInputRef","handleSubmit","e","preventDefault","formData","FormData","append","post","posts","create","headers","then","res","push","catch","err","message","target","value","height","text","render","current","click","files","PostUpdate","postSlug","data","retrieve"],"mappings":"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","sourcesContent":["import React ,{useState, useRef}from 'react';\r\nimport {Header, Button, Form,Image,Divider} from 'semantic-ui-react';\r\nimport {useFetch, history} from '../helpers';\r\nimport axios from 'axios';\r\nimport MdEditor from 'react-markdown-editor-lite'\r\nimport MarkdownIt from 'markdown-it'\r\nimport 'react-markdown-editor-lite/lib/index.css';\r\n\r\nimport Loader from '../components/Loader';\r\nimport Message from '../components/Message';\r\nimport {useParams } from 'react-router-dom';\r\nimport {api} from '../api';\r\n\r\nconst PostUpdateForm = ({initialTitle,initialContent, initialThumbnail}) =>{\r\n    const [error, setError] = useState(null)\r\n    const [loading, setLoading] = useState(false)\r\n    \r\n    const [title, setTitle] = useState(initialTitle);\r\n    const [markdown, setMarkdown] = useState(initialContent)\r\n    const [currentThumbnail, setCurrentThumbnail] = useState(initialThumbnail)\r\n    const [thumbnail, setThumbnail] = useState(null)\r\n\r\n    const mdParser = new MarkdownIt();\r\n\r\n    const fileInputRef = useRef()\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n\r\n        const formData = new FormData()\r\n        formData.append(\"thumbnail\", thumbnail)\r\n        formData.append(\"title\", title)\r\n        formData.append(\"content\", markdown)\r\n        axios\r\n            .post(api.posts.create, formData, {\r\n                headers: {\r\n                    \"Content-Type\": \"multipart/form-data\",\r\n                    \"Authorization\": \"Token a8df07ad37824b4c5fd9ac5d4bc13e424fa4fd8b\"\r\n                }\r\n            })\r\n            .then(res => {\r\n                setLoading(false);\r\n                history.push('/')\r\n            })\r\n            .catch(err => {\r\n                setLoading(false);\r\n                setError(err.message || err)\r\n            })\r\n    }\r\n    \r\n    return(\r\n        <div>\r\n        <Header>Update Post</Header>\r\n        {error && <Message negative message={error} />}\r\n        {currentThumbnail && <Image src={currentThumbnail} size=\"small\"/>}\r\n        <Divider/>\r\n        <Form onSubmit={handleSubmit}>\r\n                <Form.Field>\r\n                    <label>Title</label>\r\n                    <input \r\n                        placeholder='Title of your post' \r\n                        value={title} \r\n                        onChange={e => setTitle(e.target.value)}\r\n                    />\r\n                </Form.Field>\r\n                <MdEditor\r\n                    value={markdown}\r\n                    style={{ height: \"500px\" }}\r\n                    renderHTML={(text) => mdParser.render(text)}\r\n                    onChange={({text}) => setMarkdown(text)}\r\n                /> \r\n                <Form.Field>\r\n                    <Button\r\n                        type=\"button\"\r\n                        fluid\r\n                        content=\"Choose a thumbnail\" \r\n                        labelPosition=\"left\" \r\n                        icon=\"file\"\r\n                        onClick={() => fileInputRef.current.click()}\r\n                    />\r\n                    <input \r\n                        ref={fileInputRef} \r\n                        type=\"file\" \r\n                        hidden\r\n                        onChange={e => setThumbnail(e.target.files[0])}\r\n                    />\r\n                </Form.Field>\r\n                <Button primary fluid loading={loading} disabled={loading} type='submit'>Submit</Button>\r\n            </Form>\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\nconst PostUpdate =() =>{\r\n    const {postSlug} = useParams()\r\n    const {data,loading,error} = useFetch(api.posts.retrieve(postSlug))\r\n    return (\r\n        <>\r\n        {error && <Message negative message={error} />}\r\n        {loading && <Loader/>}\r\n        {data && <PostUpdateForm/>}\r\n        </>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default PostUpdate;"]},"metadata":{},"sourceType":"module"}