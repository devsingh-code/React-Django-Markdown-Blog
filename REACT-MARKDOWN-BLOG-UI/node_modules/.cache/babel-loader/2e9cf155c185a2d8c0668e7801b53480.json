{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createForOfIteratorHelper(o) {\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) {\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var it,\n      normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport classnames from 'classnames';\nimport hljs from 'highlight.js';\nimport * as React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport \"./hljs.css\";\nimport \"./index.css\";\nimport \"./markdown.css\";\nhljs.configure({\n  classPrefix: '',\n  // don't append class prefix\n  tabReplace: '  ' // 2 spaces\n\n});\n\nvar PreviewMarkdown = /*#__PURE__*/function (_React$Component) {\n  _inherits(PreviewMarkdown, _React$Component);\n\n  var _super = _createSuper(PreviewMarkdown);\n\n  function PreviewMarkdown(props) {\n    var _this;\n\n    _classCallCheck(this, PreviewMarkdown);\n\n    _this = _super.call(this, props);\n    _this.node = void 0;\n\n    _this.allowNode = function (node) {\n      if (node.type === 'html' && node.value) {\n        if (/<!--([^]+?)-->/.test(node.value)) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    _this.state = {\n      value: props.value,\n      visble: props.visble\n    };\n    return _this;\n  }\n\n  _createClass(PreviewMarkdown, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.highlight();\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      this.setState({\n        visble: true\n      });\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this.setState({\n        visble: false\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.visble !== this.props.visble) {\n        this.setState({\n          visble: nextProps.visble\n        });\n      }\n    }\n  }, {\n    key: \"highlight\",\n    value: function highlight() {\n      var code = this.node.getElementsByTagName('code');\n\n      var _iterator = _createForOfIteratorHelper(code),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var value = _step.value;\n          var tag = value.parentNode;\n\n          if (tag && tag.tagName === 'PRE') {\n            hljs.highlightBlock(value);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"updateSource\",\n    value: function updateSource(value) {\n      var _this2 = this;\n\n      this.setState({\n        value: value\n      }, function () {\n        _this2.highlight();\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          prefixCls = _this$props.prefixCls,\n          visble = _this$props.visble,\n          value = _this$props.value,\n          previewProps = _this$props.previewProps,\n          elementProps = _objectWithoutProperties(_this$props, [\"prefixCls\", \"visble\", \"value\", \"previewProps\"]);\n\n      return /*#__PURE__*/React.createElement(\"div\", _extends({\n        ref: function ref(node) {\n          return _this3.node = node;\n        },\n        className: classnames(\"\".concat(prefixCls, \"-preview\"), _defineProperty({}, \"\".concat(prefixCls, \"-visble\"), this.state.visble))\n      }, elementProps), /*#__PURE__*/React.createElement(ReactMarkdown, _extends({\n        className: classnames(\"\".concat(prefixCls, \"-markdown\")),\n        source: this.state.value,\n        escapeHtml: false,\n        allowNode: this.allowNode\n      }, previewProps)));\n    }\n  }]);\n\n  return PreviewMarkdown;\n}(React.Component);\n\nPreviewMarkdown.defaultProps = {\n  prefixCls: 'md-editor',\n  visble: true\n};\nexport { PreviewMarkdown as default };","map":{"version":3,"sources":["../../../../src/components/PreviewMarkdown/index.tsx"],"names":["hljs","classPrefix","tabReplace","PreviewMarkdown","React","Component","defaultProps","prefixCls","visble","node","value","props","nextProps","code","tag","previewProps","elementProps","classnames","allowNode"],"mappings":"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","sourcesContent":["import classnames from 'classnames'\nimport hljs from 'highlight.js';\nimport * as React from 'react';\nimport ReactMarkdown, { MarkdownAbstractSyntaxTree, ReactMarkdownProps } from 'react-markdown';\nimport { IProps } from '../../common/props';\nimport './hljs.less';\nimport './index.less';\nimport './markdown.less';\n\nhljs.configure({\n  classPrefix: '', // don't append class prefix\n  tabReplace: '  ', // 2 spaces\n});\n\nexport interface IPreviewMarkdown extends IProps {\n  visble: boolean;\n  previewProps?: ReactMarkdownProps;\n  value?: string;\n  prefixCls?: string;\n  style?: React.CSSProperties;\n}\n\nexport interface IPreviewMarkdownState {\n  value?: string;\n  visble?: boolean;\n}\n\nexport default class PreviewMarkdown extends React.Component<IPreviewMarkdown, IPreviewMarkdownState> {\n  public static defaultProps: IPreviewMarkdown = {\n    prefixCls: 'md-editor',\n    visble: true,\n  }\n  public node!: HTMLDivElement;\n  constructor(props: IPreviewMarkdown) {\n    super(props);\n    this.state = {\n      value: props.value,\n      visble: props.visble,\n    }\n  }\n\n  public componentDidMount() {\n    this.highlight();\n  }\n\n  public show() {\n    this.setState({ visble: true });\n  }\n\n  public hide() {\n    this.setState({ visble: false });\n  }\n\n  public componentWillReceiveProps(nextProps: IPreviewMarkdown) {\n    if (nextProps.visble !== this.props.visble) {\n      this.setState({ visble: nextProps.visble });\n    }\n  }\n\n  public highlight() {\n    const code = this.node.getElementsByTagName('code') as unknown as HTMLElement[];\n    for (const value of code) {\n      const tag = value.parentNode as HTMLElement;\n      if (tag && tag.tagName === 'PRE') {\n        hljs.highlightBlock(value);\n      }\n    }\n  }\n\n  public updateSource(value: string) {\n    this.setState({ value }, () => {\n      this.highlight();\n    });\n  }\n\n  public render() {\n    const { prefixCls, visble, value, previewProps, ...elementProps } = this.props;\n    return (\n      <div\n        ref={(node: HTMLDivElement) => this.node = node}\n        className={classnames(`${prefixCls}-preview`, {\n          [`${prefixCls}-visble`]: this.state.visble,\n        })}\n        {...elementProps}\n      >\n        <ReactMarkdown\n          className={classnames(`${prefixCls}-markdown`)}\n          source={this.state.value}\n          escapeHtml={false}\n          allowNode={this.allowNode}\n          {...previewProps}\n        />\n      </div>\n    );\n  }\n  private allowNode = (node: MarkdownAbstractSyntaxTree) => {\n    if (node.type === 'html' && node.value) {\n      if (/<!--([^]+?)-->/.test(node.value)) {\n        return false;\n      }\n    }\n    return true;\n  }\n}"]},"metadata":{},"sourceType":"module"}