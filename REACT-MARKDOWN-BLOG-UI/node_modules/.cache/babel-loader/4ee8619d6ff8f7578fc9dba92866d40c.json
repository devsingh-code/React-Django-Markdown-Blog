{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport 'codemirror/mode/markdown/markdown';\nimport React, { Component } from 'react';\nimport \"./codemirror.css\";\nimport \"./index.css\";\nvar SERVER_RENDERED = typeof navigator === 'undefined' || global.PREVENT_CODEMIRROR_RENDER === true;\nvar cm;\n\nif (!SERVER_RENDERED) {\n  // tslint:disable-next-line: no-var-requires\n  cm = require('codemirror');\n}\n\nvar ReactCodeMirror = /*#__PURE__*/function (_Component) {\n  _inherits(ReactCodeMirror, _Component);\n\n  var _super = _createSuper(ReactCodeMirror); // public editor!: Doc | Editor | EditorFromTextArea | Editor;\n\n\n  function ReactCodeMirror(props) {\n    var _this;\n\n    _classCallCheck(this, ReactCodeMirror);\n\n    _this = _super.call(this, props);\n    _this.textarea = void 0;\n    _this.editor = void 0;\n    return _this;\n  }\n\n  _createClass(ReactCodeMirror, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(\"textarea\", {\n        ref: function ref(instance) {\n          return _this2.textarea = instance;\n        }\n      });\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      if (SERVER_RENDERED) {\n        return;\n      }\n\n      if (this.props.editorWillMount) {\n        this.props.editorWillMount();\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (SERVER_RENDERED) {\n        return;\n      }\n\n      var options = this.props.options;\n\n      if (this.props.defineMode) {\n        if (this.props.defineMode.name && this.props.defineMode.fn) {\n          cm.defineMode(this.props.defineMode.name, this.props.defineMode.fn);\n        }\n      }\n\n      var editorOption = _objectSpread(_objectSpread({\n        tabSize: 2,\n        lineNumbers: true\n      }, options), {}, {\n        mode: 'markdown'\n      }); // 生成codemirror实例\n\n\n      this.editor = cm.fromTextArea(this.textarea, editorOption);\n      this.renderCodeMirror(this.props);\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextPros) {\n      if (nextPros.value !== this.props.value || nextPros.width !== this.props.width || nextPros.height !== this.props.height) {\n        this.renderCodeMirror(nextPros);\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      return nextProps.value !== this.props.value || nextProps.options !== this.props.options || nextProps.height !== this.props.height || nextProps.width !== this.props.width;\n    } // 将props中所有的事件处理函数映射并保存\n\n  }, {\n    key: \"getEventHandleFromProps\",\n    value: function getEventHandleFromProps() {\n      var propNames = Object.keys(this.props);\n      var eventHandle = propNames.filter(function (prop) {\n        return /^on+/.test(prop);\n      });\n      var eventDict = {};\n      eventHandle.forEach(function (ele) {\n        eventDict[ele] = ele.replace(/^on[A-Z]/g, function (s) {\n          return s.slice(2).toLowerCase();\n        });\n      });\n      return eventDict;\n    }\n  }, {\n    key: \"renderCodeMirror\",\n    value: function renderCodeMirror(props) {\n      var _this3 = this;\n\n      var value = props.value,\n          width = props.width,\n          height = props.height; // 获取CodeMirror用于获取其中的一些常量\n      // 事件处理映射\n\n      var eventDict = this.getEventHandleFromProps();\n      Object.keys(eventDict).forEach(function (event) {\n        var handle = _this3.props[event];\n\n        _this3.editor.on(eventDict[event], handle);\n      }); // Init value\n\n      this.editor.setValue(value || ''); // this.editor.setOption(name, editorOption.mode);\n\n      if (width || height) {\n        // Setting size\n        this.editor.setSize(width, height);\n      }\n    }\n  }]);\n\n  return ReactCodeMirror;\n}(Component);\n\nReactCodeMirror.defaultProps = {\n  height: '100%',\n  options: {\n    lineNumbers: true,\n    mode: 'markdown',\n    tabSize: 2\n  },\n  value: '',\n  width: '100%'\n};\nexport { ReactCodeMirror as default };","map":{"version":3,"sources":["../../../../src/components/CodeMirror/index.tsx"],"names":["SERVER_RENDERED","global","cm","require","ReactCodeMirror","Component","defaultProps","height","options","lineNumbers","mode","tabSize","value","width","textarea","editor","editorOption","nextPros","nextProps","nextState","propNames","Object","eventHandle","eventDict","s","props","handle"],"mappings":"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","sourcesContent":["import * as CodeMirror from 'codemirror';\nimport 'codemirror/mode/markdown/markdown';\nimport React, { Component } from 'react';\nimport { DomEvent, IDefineModeOptions, IEventDict, IGetSelectionOptions, IInstance, ISetScrollOptions, ISetSelectionOptions } from '../../common/codemirror';\nimport { IProps } from '../../common/props';\nimport './codemirror.less';\nimport './index.less';\n\ndeclare let global: any;\ndeclare let require: any;\n\nconst SERVER_RENDERED = (typeof navigator === 'undefined' || global.PREVENT_CODEMIRROR_RENDER === true);\n\nlet cm: any;\nif (!SERVER_RENDERED) {\n  // tslint:disable-next-line: no-var-requires\n  cm = require('codemirror');\n}\n\nexport interface ICodeMirror extends IProps {\n  value?: string,\n  width?: number | string,\n  height?: number | string,\n  className?: string;\n  cursor?: CodeMirror.Position;\n  defineMode?: IDefineModeOptions;\n  editorDidConfigure?: (editor: IInstance) => void;\n  editorDidMount?: (editor: IInstance, value: string, cb: () => void) => void;\n  editorWillMount?: () => void;\n  editorWillUnmount?: (lib: any) => void;\n  onClear?: (from: CodeMirror.Position, to: CodeMirror.Position) => void;\n  onBlur?: DomEvent;\n  onChange?: (editor: IInstance, data: CodeMirror.EditorChange, value: string) => void;\n  onContextMenu?: DomEvent;\n  onCopy?: DomEvent;\n  onCursor?: (editor: IInstance, data: CodeMirror.Position) => void;\n  onCut?: DomEvent;\n  onCursorActivity?: (editor: IInstance) => void;\n  onDblClick?: DomEvent;\n  onDragEnter?: DomEvent;\n  onDragLeave?: DomEvent;\n  onDragOver?: DomEvent\n  onDragStart?: DomEvent;\n  onDrop?: DomEvent;\n  onFocus?: DomEvent\n  onGutterClick?: (editor: IInstance, lineNumber: number, gutter: string, event: Event) => void;\n  onKeyDown?: DomEvent;\n  onKeyPress?: DomEvent;\n  onKeyUp?: DomEvent;\n  onMouseDown?: DomEvent;\n  onPaste?: DomEvent;\n  onRenderLine?: (editor: IInstance, line: CodeMirror.LineHandle, element: HTMLElement) => void;\n  onScroll?: (editor: IInstance, data: CodeMirror.ScrollInfo) => void;\n  onSelection?: (editor: IInstance, data: IGetSelectionOptions) => void;\n  onTouchStart?: DomEvent;\n  onUpdate?: (editor: IInstance) => void;\n  onViewportChange?: (editor: IInstance, start: number, end: number) => void;\n  options?: CodeMirror.EditorConfiguration\n  selection?: { ranges: ISetSelectionOptions[], focus?: boolean };\n  scroll?: ISetScrollOptions;\n  [key: string]: any,\n}\n\nexport interface ICodeMirrorState {\n  value: string;\n}\n\nexport default class ReactCodeMirror extends Component<ICodeMirror, ICodeMirrorState> {\n  public static defaultProps: ICodeMirror = {\n    height: '100%',\n    options: {\n      lineNumbers: true,\n      mode: 'markdown',\n      tabSize: 2,\n    },\n    value: '',\n    width: '100%',\n  }\n  public textarea!: HTMLTextAreaElement;\n  public editor!: any;\n  // public editor!: Doc | Editor | EditorFromTextArea | Editor;\n  public constructor(props: Readonly<ICodeMirror>) {\n    super(props);\n  }\n  public render() {\n    return (\n      <textarea ref={(instance: HTMLTextAreaElement) => this.textarea = instance} />\n    );\n  }\n\n  public componentWillMount() {\n    if (SERVER_RENDERED) {\n      return;\n    }\n\n    if (this.props.editorWillMount) {\n      this.props.editorWillMount();\n    }\n  }\n\n  public componentDidMount() {\n    if (SERVER_RENDERED) {\n      return;\n    }\n\n    const { options } = this.props;\n    if (this.props.defineMode) {\n      if (this.props.defineMode.name && this.props.defineMode.fn) {\n        cm.defineMode(this.props.defineMode.name, this.props.defineMode.fn);\n      }\n    }\n\n    const editorOption = { tabSize: 2, lineNumbers: true, ...options, mode: 'markdown' };\n    // 生成codemirror实例\n    this.editor = cm.fromTextArea(this.textarea, editorOption) as CodeMirror.EditorFromTextArea;\n\n    this.renderCodeMirror(this.props);\n  }\n  public UNSAFE_componentWillReceiveProps(nextPros: ICodeMirror) {\n    if (nextPros.value !== this.props.value || nextPros.width !== this.props.width || nextPros.height !== this.props.height) {\n      this.renderCodeMirror(nextPros);\n    }\n  }\n\n  public shouldComponentUpdate(nextProps: ICodeMirror, nextState: ICodeMirrorState) {\n    return nextProps.value !== this.props.value \n    || nextProps.options !== this.props.options\n    || nextProps.height !== this.props.height\n    || nextProps.width !== this.props.width;\n  }\n  // 将props中所有的事件处理函数映射并保存\n  public getEventHandleFromProps(): IEventDict {\n    const propNames = Object.keys(this.props);\n    const eventHandle = propNames.filter((prop) => {\n      return /^on+/.test(prop);\n    });\n\n    const eventDict: IEventDict = {};\n    eventHandle.forEach((ele) => {\n      eventDict[ele] = ele.replace(/^on[A-Z]/g, s => s.slice(2).toLowerCase()) as string;\n    });\n\n    return eventDict;\n  }\n\n  private renderCodeMirror(props: ICodeMirror) {\n    const { value, width, height } = props;\n    // 获取CodeMirror用于获取其中的一些常量\n    // 事件处理映射\n    const eventDict = this.getEventHandleFromProps();\n    Object.keys(eventDict).forEach((event: string) => {\n      const handle = this.props[event];\n      this.editor.on(eventDict[event], handle);\n    });\n    // Init value\n    this.editor.setValue(value || '');\n    // this.editor.setOption(name, editorOption.mode);\n\n    if (width || height) {\n      // Setting size\n      this.editor.setSize(width, height);\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}